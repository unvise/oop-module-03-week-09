@startuml
interface CrudRepository<T, ID> {
    + List<T> findAll()
    + Optional<T> findById(ID id)
    + T save(T instance)
    + T update(T instance)
    + T delete(ID id)
}

abstract class AbstractCrudRepository<T extends Identifiable<ID>, ID extends Serializable> {
    - PreparedStatementManagerImpl preparedStatementManager
    - ResultSetMapper<T> resultSetMapper
    - TableInfo tableInfo
    # AbstractCrudRepository(Class<T> clazz, DataSource dataSource)
    + List<T> findAll()
    + Optional<T> findById(ID id)
    + T save(T instance)
    + T update(T instance)
    + T delete(ID id)
}

class TableInfo {
    - String tableName
    - Class<?> tableClass
    - Map.Entry<String, BeanFieldInfo> idColumn
    - Map<String, BeanFieldInfo> columns
    - Map<String, BeanFieldInfo> oneToOne
    - Map<String, BeanFieldInfo> oneToMany
    - Map<String, BeanFieldInfo> manyToOne
    + ...getters()
    + ...setters()
    + List<BeanFieldInfo> getAllBeanFieldInfo()
    + Boolean isTableHasReferences()
    + void fillColumns(List<BeanFieldInfo> beanFieldInfos)+
    + String toString()
    + int hashCode()
    + boolean equals()
    + TableBuilder builder()
}

interface PreparedStatementManager {
    + void executeUpdate(String sql) throws SQLException
    + void executeUpdate(String sql, List<Object> values) throws SQLException
    + <T> List<T> executeQuery(String sql, Function<ResultSet, List<T>> resultSetListFunction)
    + void fillPreparedStatement(PreparedStatement preparedStatement, List<Object> values)
    + static <T extends Identifiable<?>> List<T> findAll(PreparedStatementManager preparedStatementManager, ResultSetMapper<T> resultSetMapper, String sql)
}

class ResultSetMapper<T> {
    - Class<T> clazz
    + ResultSetMapper(Class<T> clazz)
    + T map(PreparedStatementManager preparedStatementManager, ResultSet resultSet)
}
class BoardRepository {
    + BoardRepository(DataSource dataSource)
}
class TicketRepository {
    + TicketRepository(DataSource dataSource)
}
class RouteRepository {
    + RouteRepository(DataSource dataSource)
}
class RoutePathRepository {
    + RoutePathRepository(DataSource dataSource)
}
class GeolocationRepository {
    + GeolocationRepository(DataSource dataSource)
}

CrudRepository <|.. AbstractCrudRepository
TableInfo *-- AbstractCrudRepository
PreparedStatementManager *-- AbstractCrudRepository
ResultSetMapper *- AbstractCrudRepository

AbstractCrudRepository <|-- BoardRepository
AbstractCrudRepository <|-- TicketRepository
AbstractCrudRepository <|-- RouteRepository
AbstractCrudRepository <|-- RoutePathRepository
AbstractCrudRepository <|-- GeolocationRepository

@enduml